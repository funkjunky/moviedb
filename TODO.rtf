{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 movie DB TODO\
\'97\
\
 *- setup environment\
	*- setup sass hotloading\'85 need to find out how.\
 *- setup component structure\
	*- Search, LeftBar (Main, Circles, Collections), Center (Filters, MovieList (MovieThumb))\
 *- setup graphic structure generally using flex box (no data)\
\
 *- use API to get currently playing movies data\
 *- setup redux to handle movie data in \{ data:\
\
 *- get scss loading working\'85\
\
 *- display thumbs and info like the screenshot [not pixel perfect]\
 *- Fix the Order at the top to look a little better\
\
 *- get react router working, JUST client side.\
	*- setup routes for: /, movie/[title]\
\
 - setup getting data through route\
	- component will mount getMovie function, which well get the data\
	- then dispatch an action to fill in the movie data\
	- then get the movie data in the render function and pass it to MovieDetail\
\
 - Use react router\'92s Link component instead of A tag\
\
 - MovieDetail single page view of the movie.\
	- put the image at the top, followed by the movie title\
	- iterate through the properties and display in a moderately nice table\
\
 - add two simple unrelated tests in two different files\
\
 - add search\
	- first add a route /search/[text]\
	- onKeyUp debounce filtering through our current set of movies.\
	- also fire a request to get results and the return well fire an action to update the movie list\
	- we also should keep track of the search requests we\'92ve made, only keeping the smallest substrings. ie. keep \'93wor\'94 and get rid of \'93world\'94, because wor contains world.\
	- add the search page component [it\'92ll use MovieList]\
\
 - create io github page for demo\
\
 - add isomorphism to page and server, including server loaded routes\
\
 - copy this project into a new Yeoman project scaffolding for \'93react redux router isomorphic\'94\
\
 - create the yeoman scaffolding, with options for routes and components, as well as what data they would consume [putting containers in front of components for getting data for routes.], also ask if they want a search and the url pattern for the search (using ::search_term:: in the pattern and ::page:: or ::start:: ::end:: for indices)}